openapi: 3.0.3
info:
  title: SmartSensify API Documentation
  description: The SmartSensify API is a robust and secure backend system designed to facilitate seamless communication between frontend applications, such as web and mobile apps, and external IoT devices (sensors). This API serves as the core of a monitoring environment system app, enabling developers to build innovative and efficient applications that interact with a wide range of IoT devices and manage user data securely.<br/><br/>
    **NOTE:** Web Services on the free instance type are automatically spun down after 15 minutes of inactivity. When a new request for a free service comes in, Render spins it up again so it can process the request.<br>
    This will cause a **delay in the response of the first request** after a period of inactivity while the instance spins up.


  termsOfService: todo
  contact:
    email: jakub.robert.krok@gmail.com
  version: 0.1.1
servers:
  - url: https://smartsensify.onrender.com/api
tags:
- name: auth
  description: Operations about user authentication
  externalDocs:
    description: Find out more
    url: https://smartsensify.onrender.com/api/users
- name: sensors
  description: Access to sensors
  externalDocs:
    description: Find out more
    url: https://smartsensify.onrender.com/api/sensors
paths:
  /auth/register:
    post:
      tags:
        - auth
      summary: Register a new user
      description: Create a new user account.
      requestBody:
        description: User object to be created.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
                - username
                - email
                - password
      responses:
        '201':
          description: User registered successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    type: object
                    properties:
                      username:
                        type: string
                      email:
                        type: string
                      password:
                        type: string
                      role:
                        type: string
                      sensors:
                        type: array
                        items:
                          type: string
                      _id:
                        type: string
                      __v:
                        type: integer
        '400':
          description: Bad request. Invalid user data.
        '409':
          description: User with the same email or username already exists.

  /auth/login:
    post:
      tags:
        - auth
      summary: User login
      description: Authenticate user and get a JSON Web Token (JWT).
      requestBody:
        description: User credentials for login.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: User authenticated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Unauthorized. Invalid credentials.
        '404':
          description: Not found. User not registered.

  /sensors:
    get:
      tags:
        - sensors
      summary: Get all sensors
      description: Retrieve a list of all sensors based on user preference. The user can choose to view their owned sensors, public sensors, or a combination of both. By default returns all *public and user's sensors* (if user is not logged into account returns only public sensors) 
        <br/><br/>
        **NOTE:** The `secretKey` is **only returned for sensors owned by the logged-in user** (whether they are public or not). The `secretKey` grants access to  write sensors data and should be treated with care. Make sure to handle and store the `secretKey` securely.
      
      parameters:
        - name: showOwned
          in: query
          description: If set to true, only the user's owned sensors will be shown.
          required: false
          schema:
            type: boolean
          example: false
        - name: showPublic
          in: query
          description: If set to true, only public sensors will be shown.
          required: false
          schema:
            type: boolean
          example: false
      responses:
        '200':
          description: A list of sensors.
          content:
            application/json:
              example:
                sensors:
                  - _id: "61743a447dcd4b61e0e48333"
                    name: Public sensor not owned by the user
                    type:
                      - "Temperature"
                      - "Humidity"
                    isPublic: true
                    __v: 0
                  - __id: "61743a447dcd4b61e0e48333"
                    name: Private sensor owned by the user
                    # The secretKey is only returned for sensors owned by the logged-in user.
                    # Public sensors or sensors not owned by the user will not include the secretKey.
                    # The secretKey grants access to private sensor data and should be treated with care.
                    # Make sure to handle and store the secretKey securely.
                    #
                    # Note: The following field is only included if the sensor is owned by the logged-in user.
                    secretKey: "5kbnkv7nows"
                    type:
                      - "Temperature"
                    isPublic: false
                    __v: 0

    post:
      tags:
        - sensors
      summary: Creates a new sensor
      description: Creates a new sensor with the provided details. **Requires the user to be logged in**.
      requestBody:
        description: Sensor object to be created.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: MyPrivateSensor
                type:
                  type: string
                  example: Temperature
                isPublic:
                  type: boolean
                  example: false
                  default: false
              required:
                - name
                - type
      responses:
        "201":
          description: Sensor created successfully
          content:
            application/json:
              example:
                message: "Sensors created successfully"
                sensor:
                  - name: MyPrivateSensor
                    secretKey: "5k3n7v5nows"
                    type:
                      - "Test"
                    isPublic: false
                    _id: "61743a447dcd4b61e0e48333"
                    __v: 0
                   
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
          
  /sensors/{sensorId}:
    get:
      tags:
        - sensors
      summary: Get a sensor by ID
      description: Retrieve sensor details by its ID.<br><br>
        **Note:** The `secretKey` is **only returned for sensors owned by the logged-in user** (whether they are public or not). The `secretKey` grants access to  write sensors data and should be treated with care. Make sure to handle and store the `secretKey` securely.
      parameters:
        - name: sensorId
          in: path
          description: ID of the sensor to retrieve.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A sensor.
          content:
            application/json:
              example:
                sensor:
                  _id: "61743a447dcd4b61e0e48333"
                  name: MyPrivateSensor
                  # The secretKey is only returned for sensors owned by the logged-in user.
                  # Public sensors or sensors not owned by the user will not include the secretKey.
                  # The secretKey grants access to private sensor data and should be treated with care.
                  # Make sure to handle and store the secretKey securely.
                  #
                  # Note: The following field is only included if the sensor is owned by the logged-in user.
                  secretKey: "5kbnkv7nows"
                  type:
                    - "test"
                  isPublic: false
                  __v: 0
                  
        '404':
          description: Sensor not found.

    put:
      tags:
        - sensors
      summary: Modify an existing sensor
      description: Modifies an existing sensor with the provided details. **Requires the user to be logged in and have ownership access to the sensor**.
      parameters:
        - name: sensorId
          in: path
          description: The unique identifier of the sensor to update.
          required: true
          schema:
            type: string
      requestBody:
        description: User object to be created.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The new name of the sensor.
                  example: New Sensor Name
                type:
                  type: string
                  description: The new type of the sensor.
                  example: Humidity
                isPublic:
                  type: boolean
                  description: Set to true if the sensor should be public.
                  example: false
                  
      responses:
        '200':
          description: A sensor.
          content:
            application/json:
              example:
                message: "Sensor updated successfully"
                sensor:
                  _id: "61743a447dcd4b61e0e48333"
                  name: "My Private Sensor with updated name"
                  # The secretKey is only returned for sensors owned by the logged-in user.
                  # Public sensors or sensors not owned by the user will not include the secretKey.
                  # The secretKey grants access to private sensor data and should be treated with care.
                  # Make sure to handle and store the secretKey securely.
                  #
                  # Note: The following field is only included if the sensor is owned by the logged-in user.
                  secretKey: "5kbnkv7nows"
                  type:
                    - "test"
                  isPublic: false
                  __v: 0
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden

    delete:
      tags:
        - sensors
      summary: Delete a sensor
      description: Deletes the specified sensor. **Requires the user to be logged in and have ownership access to the sensor**.
      parameters:
        - name: sensorId
          in: path
          description: The unique identifier of the sensor to delete.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Sensor deleted successfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
  
  

